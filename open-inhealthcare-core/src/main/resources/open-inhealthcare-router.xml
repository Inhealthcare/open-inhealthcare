<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="	
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd">

	<context:property-placeholder
		location="classpath:open-inhealthcare-router-defaults.properties" />

	<bean id="hl7codec" class="org.apache.camel.component.hl7.HL7MLLPCodec">
		<property name="charset" value="iso-8859-1" />
	</bean>
	<bean id="hl7dataformat" class="org.apache.camel.component.hl7.HL7DataFormat" />

	<!-- Configure the message processors -->
	<bean id="ackProcess" class="uk.co.inhealthcare.open.jsat.hl7.AckProcessor" />

	<!-- Configure message handlers -->
	<bean id="unsupportedHL7MessageHandler"
		class="uk.co.inhealthcare.open.jsat.hl7.UnsupportedHL7MessageHandler" />
	<bean id="hl7MessageDispatcher" class="uk.co.inhealthcare.open.jsat.hl7.HL7MessageDispatcher" />

	<!-- Configure the email outbound message senders -->
	<bean id="technicalAlertSender" class="uk.co.inhealthcare.open.jsat.services.EmailSenderImpl">
		<property name="template" ref="template" />
		<property name="subject">
			<value>${alerts.technical.email.subject}</value>
		</property>
		<property name="contentTransformer">
			<value>${alerts.technical.email.xslt}</value>
		</property>
		<property name="to">
			<value>${alerts.technical.email.to}</value>
		</property>
		<property name="from">
			<value>${alerts.technical.email.from}</value>
		</property>
	</bean>

	<bean id="businessAlertSender" class="uk.co.inhealthcare.open.jsat.services.EmailSenderImpl">
		<property name="template" ref="template" />
		<property name="subject">
			<value>${alerts.business.email.subject}</value>
		</property>
		<property name="contentTransformer">
			<value>${alerts.business.email.xslt}</value>
		</property>
		<property name="to">
			<value>${alerts.business.email.to}</value>
		</property>
		<property name="from">
			<value>${alerts.business.email.from}</value>
		</property>
	</bean>

	<!-- camel configuration for routes and integration -->

	<camel:camelContext id="camel"
		xmlns="http://camel.apache.org/schema/spring">
		<package>uk.co.inhealthcare.open.jsat.routes</package>
		<template id="template" />

		<camel:endpoint id="smscListener"
			uri="mina2:tcp://localhost:${router.hl7.tcp.port}?sync=true&amp;codec=#hl7codec" />
		<camel:endpoint id="pasUpdate"
			uri="mina2:tcp://localhost:${pas.update.tcp.port}?sync=true&amp;codec=#hl7codec" />
		<!-- TODO: Is there a way of securing these credentials? (other than just 
			using a properties file) -->
		<camel:endpoint id="emailGateway" uri="${email.gateway}" />

	</camel:camelContext>

	<!-- datasource configuration -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${router.db.driverClass}" />
		<property name="url" value="${router.db.url}" />
		<property name="username" value="${router.db.username}" />
		<property name="password" value="${router.db.password}" />
	</bean>

	<jdbc:initialize-database 
		data-source="dataSource" ignore-failures="ALL">
		<jdbc:script location="classpath*:SMSCInputCreate.sql" />
		<jdbc:script location="classpath*:SMSCOutcomeCreate.sql" />
		<jdbc:script location="classpath*:SMSPRequestCreate.sql" />
		<jdbc:script location="classpath*:SMSPResponseCreate.sql" />
	</jdbc:initialize-database>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:smsclogdb/SqlMapConfig.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


</beans>
